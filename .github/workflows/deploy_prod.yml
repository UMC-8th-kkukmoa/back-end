name: EC2에 배포 (운영 서버)

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:      # 수동 실행 버튼

jobs:
  deploy:
    name: 배포
    runs-on: ubuntu-latest

    steps:
      - name: 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: 운영용 .env 파일 생성
        run: |
          printf '%s\n' 'RDS_URL=${{ secrets.RDS_URL_PROD }}' >> .env
          printf '%s\n' 'RDS_USERNAME=${{ secrets.RDS_USERNAME }}' >> .env
          printf '%s\n' 'RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}' >> .env
          printf '%s\n' 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> .env
          printf '%s\n' 'AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}' >> .env
          printf '%s\n' 'AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}' >> .env
          printf '%s\n' 'AWS_REGION=${{ secrets.AWS_REGION }}' >> .env
          printf '%s\n' 'AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}' >> .env
          printf '%s\n' 'Client_ID=${{ secrets.KAKAO_CLIENT_ID }}' >> .env
          printf '%s\n' 'TOSS_SECRET_KEY=${{ secrets.TOSS_SECRET_KEY }}' >> .env
          printf '%s\n' 'REDIS_HOST=${{ secrets.REDIS_HOST }}' >> .env
          printf '%s\n' 'REDIS_PORT=${{ secrets.REDIS_PORT }}' >> .env
          printf '%s\n' 'REDIRECT_URI=${{ secrets.REDIRECT_URI }}' >> .env
          printf '%s\n' 'MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}' >> .env
          printf '%s\n' 'MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}' >> .env
          printf '%s\n' 'TOSS_CLIENT_KEY=${{ secrets.TOSS_CLIENT_KEY }}' >> .env

      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kkukmoa:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kkukmoa:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kkukmoa:buildcache,mode=max

      - name: EC2로 .env 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PUBLIC_IP_PROD }}
          username: ${{ secrets.EC2_USERNAME_PROD }} # 'ubuntu'
          key: ${{ secrets.EC2_PRIVATE_KEY_PROD }}
          source: .env
          target: /home/ubuntu/back-end/current # 배포 경로를 'current'로 통일

      - name: EC2 접속 후 애플리케이션 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_PUBLIC_IP_PROD }}
          username: ${{ secrets.EC2_USERNAME_PROD }}
          key: ${{ secrets.EC2_PRIVATE_KEY_PROD }}
          script_stop: true
          script: |
            # 1. 배포 경로가 없으면 생성
            mkdir -p /home/ubuntu/back-end/current
            cd /home/ubuntu/back-end/current

            # 2. Docker Hub에서 최신 이미지 받기
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/kkukmoa:latest

            # 3. 기존 컨테이너 중지 및 삭제 (이름으로 관리)
            docker stop kkukmoa-app || true
            docker rm kkukmoa-app || true

            # 4. 새 컨테이너 실행
            # --env-file .env: scp로 전송한 .env 파일의 환경변수를 모두 주입
            # --restart=always: 서버 재부팅 시 이 컨테이너 자동 시작
            # --name kkukmoa-app: 컨테이너에 'kkukmoa-app' 이름 부여
            docker run -d -p 8080:8080 \
              --env-file .env \
              --restart=always \
              --name kkukmoa-app \
              ${{ secrets.DOCKERHUB_USERNAME }}/kkukmoa:latest

            # 5. (선택) 사용하지 않는 오래된 Docker 이미지 정리
            docker image prune -af
            
            # 6. 헬스 체크 (로그 확인 방식으로 변경)
            echo "서버 기동 대기 중..."
            sleep 35
            if curl -k -I https://kkukmoa.shop 2>/dev/null | grep -q "200 OK"; then
              echo "서버 기동 성공 (HTTPS 응답 정상)"
            else
              echo "서버 기동 실패 - 도커 로그 출력"
              docker logs kkukmoa-app | tail -n 50
              exit 1
            fi