name: EC2에 배포 (운영 서버)

on:
  pull_request:
    branches: [ main ]   # main 브랜치에 PR이 생성될 때 실행
  workflow_dispatch:      # 수동 실행 버튼 추가

jobs:
  deploy:
    name: 배포
    runs-on: ubuntu-latest

    steps:
      - name: 레포지토리 코드 가져오기
        uses: actions/checkout@v4

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 운영용 .env 파일 생성
        run: |
          printf '%s\n' 'RDS_URL=${{ secrets.RDS_URL_PROD }}' >> .env
          printf '%s\n' 'RDS_USERNAME=${{ secrets.RDS_USERNAME }}' >> .env
          printf '%s\n' 'RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}' >> .env
          printf '%s\n' 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> .env
          printf '%s\n' 'AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}' >> .env
          printf '%s\n' 'AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}' >> .env
          printf '%s\n' 'AWS_REGION=${{ secrets.AWS_REGION }}' >> .env
          printf '%s\n' 'AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}' >> .env
          printf '%s\n' 'Client_ID=${{ secrets.KAKAO_CLIENT_ID }}' >> .env
          printf '%s\n' 'TOSS_SECRET_KEY=${{ secrets.TOSS_SECRET_KEY }}' >> .env
          printf '%s\n' 'REDIS_HOST=${{ secrets.REDIS_HOST }}' >> .env
          printf '%s\n' 'REDIS_PORT=${{ secrets.REDIS_PORT }}' >> .env
          printf '%s\n' 'REDIRECT_URI=${{ secrets.REDIRECT_URI }}' >> .env
          printf '%s\n' 'MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}' >> .env
          printf '%s\n' 'MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}' >> .env
          printf '%s\n' 'TOSS_CLIENT_KEY=${{ secrets.TOSS_CLIENT_KEY }}' >> .env

      - name: JAR 빌드
        run: ./gradlew clean bootJar -x test

      - name: 빌드된 JAR 이름 변경
        run: |
          JAR_PATH=$(ls ./build/libs/*SNAPSHOT.jar | head -n 1)
          mv "$JAR_PATH" ./project.jar

      - name: EC2로 project.jar 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PUBLIC_IP_PROD }}
          username: ${{ secrets.EC2_USERNAME_PROD }}
          key: ${{ secrets.EC2_PRIVATE_KEY_PROD }}
          source: project.jar
          target: /home/ubuntu/back-end/tobe

      - name: EC2로 .env 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PUBLIC_IP_PROD }}
          username: ${{ secrets.EC2_USERNAME_PROD }}
          key: ${{ secrets.EC2_PRIVATE_KEY_PROD }}
          source: .env
          target: /home/ubuntu/back-end/tobe

      - name: EC2 접속 후 애플리케이션 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_PUBLIC_IP_PROD }}
          username: ${{ secrets.EC2_USERNAME_PROD }}
          key: ${{ secrets.EC2_PRIVATE_KEY_PROD }}
          script_stop: true
          script: |
            # 이전 배포 폴더 삭제 및 재생성
            rm -rf /home/ubuntu/back-end/current
            mkdir -p /home/ubuntu/back-end/current

            # 새로운 JAR 및 .env 이동
            mv /home/ubuntu/back-end/tobe/project.jar /home/ubuntu/back-end/current/project.jar
            mv /home/ubuntu/back-end/tobe/.env /home/ubuntu/back-end/current/.env

            # 실행 디렉토리 이동
            cd /home/ubuntu/back-end/current

            # 기존 8080 프로세스 종료
            sudo fuser -k -n tcp 8080 || true

            # 환경변수 로드 후 Spring Boot 실행 (백그라운드)
            env $(cat .env | xargs) nohup java -jar project.jar > output.log 2>&1 &

            # 서버 기동 확인
            echo "서버 기동 대기 중..."
            sleep 35
            if curl -k -I https://kkukmoa.shop 2>/dev/null | grep -q "200 OK"; then
              echo "서버 기동 성공 (HTTPS 응답 정상)"
            else
              echo "서버 기동 실패 - 로그 출력"
              cat output.log | tail -n 100
              exit 1
            fi
